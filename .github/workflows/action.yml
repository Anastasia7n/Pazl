name: Saucedemo_05

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]


jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v3
      id: setup-python
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true


    - name: Install poetry dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Run tests
      run:
        poetry run pytest -v

      on:
        push:
          branches ignore: [ main ]
        pull_request:
          branches: [ main ]


      jobs:
        linter_name:
          name: runner/black
          runs-on: ubuntu-latest
          steps:
            - uses: actions/checkout@v3
            - name: Check files using the black formatter
              uses: rickstaa/action-black@v1
              id: action_black
              with:
                black_args: ". --exclude .venv"
            - name: Create Commit
              if: steps.action_black.outputs.is_formatted == 'true'
              uses: stefanzweifel/git-auto-commit-action@v4
              with:
                commit_message: ":art: Format Python code with psf/black"


        build:

          runs-on: ubuntu-latest
          strategy:
            fail-fast: false
            matrix:
              python-version: [ "3.10" ]

          steps:
            - uses: actions/checkout@v3
              id: setup-python
            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v3
              with:
                python-version: ${{ matrix.python-version }}

            - name: Install poetry
              uses: snok/install-poetry@v1
              with:
                virtualenvs-create: true
                virtualenvs-in-project: true
                installer-parallel: true

            - name: Load cached venv
              id: cached-poetry-dependencies
              uses: actions/cache@v3
              with:
                path: deployer/.venv
                key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/pr-deployer.yml') }}

            - name: Install poetry dependencies
              if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
              run: poetry install --no-interaction --no-root

            - name: Run tests
              run:
                poetry run pytest -v -s --browser=firefox

              on:
                push:
                  branches ignore: [ main ]
                pull_request:
                  branches: [ main ]


              jobs:
                linter_name:
                  name: runner/black
                  runs-on: ubuntu-latest
                  steps:
                    - uses: actions/checkout@v3
                    - name: Check files using the black formatter
                      uses: rickstaa/action-black@v1
                      id: action_black
                      with:
                        black_args: ". --exclude .venv"
                    - name: Create Commit
                      if: steps.action_black.outputs.is_formatted == 'true'
                      uses: stefanzweifel/git-auto-commit-action@v4
                      with:
                        commit_message: ":art: Format Python code with psf/black"


                build:

                  runs-on: ubuntu-latest
                  strategy:
                    fail-fast: false
                    matrix:
                      python-version: [ "3.10" ]

                  steps:
                    - uses: actions/checkout@v3
                      id: setup-python
                    - name: Set up Python ${{ matrix.python-version }}
                      uses: actions/setup-python@v3
                      with:
                        python-version: ${{ matrix.python-version }}

                    - name: Install poetry
                      uses: snok/install-poetry@v1
                      with:
                        virtualenvs-create: true
                        virtualenvs-in-project: true
                        installer-parallel: true

                    - name: Load cached venv
                      id: cached-poetry-dependencies
                      uses: actions/cache@v3
                      with:
                        path: deployer/.venv
                        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/pr-deployer.yml') }}

                    - name: Install poetry dependencies
                      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
                      run: poetry install --no-interaction --no-root

                    - name: Run tests
                      run:
                        poetry run pytest -v -s --browser=firefox